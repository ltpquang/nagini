{"version":3,"sources":["pkg/transformers/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/JsonBeautify.ts","pkg/transformers/TransformerBlueprint.ts","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","_transformers","this","input","push","result","transformers","forEach","trans","index","_a","transformData","from","Unescape","unescape","JsonBeautify","obj","JSON","parse","e","stringify","TransformerBlueprint","make","newInstance","name","allTransformers","get","Map","TransformerNode","transformer","Accordion","Item","eventKey","toString","Header","Body","TransformEngineComponent","onChange","useState","engine","setEngine","useEffect","map","_","DropdownButton","id","title","onSelect","transformerMeta","forName","addTransformer","prevState","clone","handleAddTransformer","all","value","key","Dropdown","as","renderSupportedNodes","Main","setInput","output","setOutput","className","Row","Col","md","span","offset","FloatingLabel","controlId","label","Form","Control","placeholder","style","height","event","currentTarget","readOnly","App","Container","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7c1eac55.chunk.js","sourcesContent":["import {Transformer} from \"./Transformer\";\n\nclass TransformEngine implements Transformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: Transformer[] = [];\n  get transformers(): Transformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: Transformer) {\n    this._transformers.push(input)\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {Transformer} from \"./Transformer\";\n\nexport default class Unescape implements Transformer {\n  transformData(input: string): string {\n    return unescape(input);\n  }\n\n  name(): string {\n    return \"Unescape\";\n  }\n}\n","import {Transformer} from \"./Transformer\";\n\nexport default class JsonBeautify implements Transformer {\n  name(): string {\n    return \"JSON Beautify\";\n  }\n\n  transformData(input: string): string {\n    let obj = {}\n    try {\n      obj = JSON.parse(input);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n    return JSON.stringify(obj, null, 4);\n  }\n}","import Unescape from \"./Unescape\";\nimport {Transformer} from \"./Transformer\";\nimport JsonBeautify from \"./JsonBeautify\";\n\ntype CreateTransformerFunction = () => Transformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())],\n    [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","import {Accordion} from \"react-bootstrap\";\nimport React from \"react\";\nimport {Transformer} from \"../transformers/Transformer\";\n\ninterface Props {\n  index: number\n  transformer: Transformer\n}\n\nexport const TransformerNode = ({index, transformer}: Props) => {\n  return (\n      <Accordion.Item\n          key={index.toString()}\n          eventKey={index.toString()}>\n        <Accordion.Header>\n          {transformer.name()}\n        </Accordion.Header>\n        <Accordion.Body>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n          tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim\n          veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea\n          commodo consequat. Duis aute irure dolor in reprehenderit in voluptate\n          velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n          cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id\n          est laborum.\n        </Accordion.Body>\n      </Accordion.Item>\n  );\n}\n","import TransformEngine from \"../transformers/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../transformers/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode index={index}\n                                     transformer={transformer}/>\n            )\n          }\n        </Accordion>\n\n        <DropdownButton id=\"dropdown-item-button\" title=\"Add node\"\n                        onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, FloatingLabel, Form, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../transformers/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  useEffect(() => {\n    setOutput(engine.transformData(input))\n  }, [engine, input])\n\n  return (\n      <div className=\"Main\">\n        <Row>\n          <Col md={{span: 8, offset: 2}}>\n            <FloatingLabel controlId=\"inputTextArea\" label=\"Input\">\n              <Form.Control\n                  as=\"textarea\"\n                  placeholder=\"Paste\"\n                  style={{height: '100px'}}\n                  onChange={(event) => {\n                    setInput(event.currentTarget.value)\n                  }}\n              />\n            </FloatingLabel>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{span: 6, offset: 3}}>\n            <TransformEngineComponent\n                onChange={setEngine}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{span: 8, offset: 2}}>\n            <FloatingLabel controlId=\"outputTextArea\" label=\"Output\">\n              <Form.Control\n                  as=\"textarea\"\n                  placeholder=\"Paste\"\n                  style={{height: '100px'}}\n                  value={output}\n                  readOnly={true}\n              />\n            </FloatingLabel>\n          </Col>\n        </Row>\n      </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Container fluid={\"md\"}>\n        <Main/>\n      </Container>\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}