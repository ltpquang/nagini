{"version":3,"sources":["pkg/base/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/JsonBeautify.ts","pkg/transformers/Replace.ts","pkg/transformers/JsonPath.ts","pkg/base/TransformerBlueprint.ts","pkg/ui/TransformerOptionsEmpty.tsx","pkg/ui/TransformerOptionsReplace.tsx","pkg/ui/TransformerOptionsJsonPath.tsx","pkg/ui/TransformerOptionsJsonBeautify.tsx","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","_transformers","this","input","push","index","splice","result","transformers","forEach","trans","_a","transformData","from","Unescape","replace","i","n","JsonBeautify","permissive","transformPermissively","transformNormal","obj","require","parse","JSON","stringify","e","p","Replace","old","new","useRegEx","length","replaceAll","RegExp","TypeError","message","JsonPath","jsonPath","jp","query","toString","TransformerBlueprint","make","newInstance","name","allTransformers","get","Map","TransformerOptionsEmpty","TransformerOptionsReplace","transformer","onChange","setReplacer","fromPartial","InputGroup","className","Text","id","DropdownButton","title","variant","onSelect","eventKey","Dropdown","Item","FormControl","placeholder","event","currentTarget","value","TransformerOptionsJsonPath","setJsonPathTrans","TransformerOptionsJsonBeautify","setPermissive","defaultChecked","icons","checked","TransformerNode","props","onClick","Row","Col","md","span","Accordion","Header","Body","OverlayTrigger","trigger","rootClose","placement","overlay","document","body","click","onRemove","Popover","Button","as","TransformEngineComponent","useState","engine","setEngine","useEffect","map","_","updated","replaceTransformer","prevState","clone","handleChangeTransformer","removeTransformer","handleRemoveTransformer","transformerMeta","forName","addTransformer","handleAddTransformer","all","key","renderSupportedNodes","Main","setInput","output","setOutput","style","minHeight","overflow","FloatingLabel","controlId","label","Form","Control","height","offset","console","log","src","readOnly","renderOutput","App","Container","fluid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ec52c3ed.chunk.js","sourcesContent":["import {StringTransformer} from \"./StringTransformer\";\n\nclass TransformEngine implements StringTransformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: StringTransformer[] = [];\n  get transformers(): StringTransformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: StringTransformer) {\n    this._transformers.push(input)\n  }\n\n  replaceTransformer(index: number, input: StringTransformer) {\n    if (this._transformers[index]) {\n      this._transformers[index] = input\n    }\n  }\n\n  removeTransformer(index: number) {\n    if (this._transformers[index]) {\n      this._transformers.splice(index, 1);\n    }\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Unescape implements StringTransformer {\n  transformData(input: string): string {\n    // TODO: https://onlinestringtools.com/unescape-string\n    return input.replace(\n        /\\\\(.?)/g,\n        function (i, n) {\n          return n === \"\\\\\" ? \"\\\\\" : n === \"n\" ? \"\\n\" : n === \"t\" ? \"\t\" : n === \"\" ? \"\" : n\n        })\n  }\n\n  name(): string {\n    return \"Unescape\";\n  }\n}\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class JsonBeautify implements StringTransformer {\n  public permissive: boolean = false\n\n  name(): string {\n    return \"JSON Beautify\";\n  }\n\n  transformData(input: string): string {\n    return this.permissive\n        ? this.transformPermissively(input)\n        : this.transformNormal(input)\n  }\n\n  private transformPermissively(input: string): string {\n    try {\n      let dJSON = require('dirty-json');\n      let obj = dJSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  private transformNormal(input: string): string {\n    try {\n      let obj = JSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonBeautify>): JsonBeautify {\n    let result = new JsonBeautify()\n    result.permissive = p.permissive ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Replace implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n  public useRegEx: boolean = false;\n\n  name(): string {\n    return \"Replace\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n\n    if (this.useRegEx) {\n      try {\n        return input.replaceAll(new RegExp(this.old, 'g'), this.new)\n      } catch (e: unknown) {\n        if (e instanceof TypeError) {\n          return \"Invalid RegEx\"\n        }\n        return (e as Error).message\n      }\n    } else {\n      return input.replaceAll(this.old, this.new)\n    }\n  }\n\n  static fromPartial(p: Partial<Replace>): Replace {\n    let result = new Replace()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    result.useRegEx = p.useRegEx ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\nimport jp from 'jsonpath'\n\nexport default class JsonPath implements StringTransformer {\n  public jsonPath: string = \"\"\n\n  name(): string {\n    return \"JSON Path Query\";\n  }\n\n  transformData(input: string): string {\n    if (this.jsonPath.length === 0) {\n      return input;\n    }\n    try {\n      input = input.replaceAll('\\n', '')\n      let obj = JSON.parse(input);\n      let resultObj = jp.query(obj, this.jsonPath)\n      return resultObj.toString()\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonPath>): JsonPath {\n    let result = new JsonPath()\n    result.jsonPath = p.jsonPath ?? \"\"\n    return result\n  }\n}","import Unescape from \"../transformers/Unescape\";\nimport {StringTransformer} from \"./StringTransformer\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Replace from \"../transformers/Replace\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ntype CreateTransformerFunction = () => StringTransformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())],\n    [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())],\n    [\"jsonpath\", new TransformerBlueprint(() => new JsonPath())],\n    [\"replace\", new TransformerBlueprint(() => new Replace())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","export const TransformerOptionsEmpty = () => {\n  return (\n      <div>No option available</div>\n  )\n}\n\n","import {Dropdown, DropdownButton, FormControl, InputGroup} from \"react-bootstrap\";\nimport Replace from \"../transformers/Replace\";\nimport React from \"react\";\n\ninterface Props {\n  transformer: Replace\n  onChange?: (updated: Replace) => void\n}\n\nexport const TransformerOptionsReplace = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<Replace>) => {\n    if (onChange) {\n      onChange(Replace.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <DropdownButton\n              id=\"isRegex\"\n              title={transformer.useRegEx ? \"regex\" : \"text\"}\n              variant=\"outline-secondary\"\n              onSelect={(eventKey) => setReplacer({...transformer, useRegEx: eventKey === \"regex\"})}>\n            <Dropdown.Item eventKey=\"text\">text</Dropdown.Item>\n            <Dropdown.Item eventKey=\"regex\">regex</Dropdown.Item>\n          </DropdownButton>\n          { transformer.useRegEx && <InputGroup.Text>/</InputGroup.Text> }\n          <FormControl\n              placeholder={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n          { transformer.useRegEx && <InputGroup.Text>/g</InputGroup.Text> }\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ninterface Props {\n  transformer: JsonPath\n  onChange?: (updated: JsonPath) => void\n}\n\nexport const TransformerOptionsJsonPath = ({transformer, onChange}: Props) => {\n  const setJsonPathTrans = (input: Partial<JsonPath>) => {\n    if (onChange) {\n      onChange(JsonPath.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"json-path\">JSON Path</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.jsonPath}\n              onChange={(event) => setJsonPathTrans({...transformer, jsonPath: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import React from \"react\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Toggle from \"react-toggle\";\n\ninterface Props {\n  transformer: JsonBeautify\n  onChange?: (updated: JsonBeautify) => void\n}\n\nexport const TransformerOptionsJsonBeautify = ({transformer, onChange}: Props) => {\n  const setPermissive = (input: Partial<JsonBeautify>) => {\n    if (onChange) {\n      onChange(JsonBeautify.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <label>\n          <Toggle\n              defaultChecked={false}\n              icons={false}\n              onChange={(event: { currentTarget: { checked: any; }; }) => setPermissive({...transformer, permissive: event.currentTarget.checked})} />\n          <span>Permissive</span>\n        </label>\n      </div>\n  )\n}","import {Accordion, Button, Col, OverlayTrigger, Popover, Row} from \"react-bootstrap\";\nimport React from \"react\";\nimport {StringTransformer} from \"../base/StringTransformer\";\nimport Replace from \"../transformers/Replace\";\nimport {TransformerOptionsEmpty} from \"./TransformerOptionsEmpty\";\nimport {TransformerOptionsReplace} from \"./TransformerOptionsReplace\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport {TransformerOptionsJsonPath} from \"./TransformerOptionsJsonPath\";\nimport {Trash} from \"react-bootstrap-icons\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport {TransformerOptionsJsonBeautify} from \"./TransformerOptionsJsonBeautify\";\n\ninterface Props {\n  index: number\n  transformer: StringTransformer\n  onChange?: (index: number, updated: StringTransformer) => void\n  onRemove?: (index: number) => void\n}\n\nexport const TransformerNode = (props: Props) => {\n  const renderOptionBody = (transformer: StringTransformer): React.ReactNode => {\n    if (transformer instanceof Replace) {\n      return <TransformerOptionsReplace\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonPath) {\n      return <TransformerOptionsJsonPath\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonBeautify) {\n      return <TransformerOptionsJsonBeautify\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else {\n      return <TransformerOptionsEmpty/>\n    }\n  }\n\n  const handleRemove = () => {\n    document.body.click()\n    if (props.onRemove) {\n      props.onRemove(props.index)\n    }\n  }\n\n  const renderOverlay = (onClick: () => void) => (\n      <Popover id=\"popover-basic\">\n        <Popover.Header>Are you sure?</Popover.Header>\n        <Popover.Body>\n          <Button variant=\"danger\" as=\"h5\"\n              onClick={() => onClick()}>\n            Yes, delete!\n          </Button>\n        </Popover.Body>\n      </Popover>\n  );\n\n  return (\n      <Row>\n        <Col md={{span: 11}}>\n          <Accordion.Item\n              key={props.index.toString()}\n              eventKey={props.index.toString()}>\n            <Accordion.Header>\n              {props.transformer.name()}\n            </Accordion.Header>\n            <Accordion.Body>\n              {renderOptionBody(props.transformer)}\n            </Accordion.Body>\n          </Accordion.Item>\n        </Col>\n        <Col md={{span: 1}}>\n          <OverlayTrigger\n              trigger=\"click\"\n              rootClose\n              placement=\"right\"\n              overlay={renderOverlay(handleRemove)}\n          >\n            <Button variant=\"danger\"><Trash/></Button>\n          </OverlayTrigger>\n        </Col>\n      </Row>\n  );\n}\n","import TransformEngine from \"../base/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../base/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\nimport {StringTransformer} from \"../base/StringTransformer\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleChangeTransformer = (index: number, transformer: StringTransformer) => {\n    engine.replaceTransformer(index, transformer)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleRemoveTransformer = (index: number) => {\n    engine.removeTransformer(index)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode index={index}\n                                     key={index.toString()}\n                                     transformer={transformer}\n                                     onChange={(index, updated) => handleChangeTransformer(index, updated)}\n                                     onRemove={(index) => handleRemoveTransformer(index)}\n                    />\n            )\n          }\n        </Accordion>\n\n        <DropdownButton id=\"dropdown-item-button\" title=\"Add node\"\n                        onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, FloatingLabel, Form, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../base/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\nimport ReactJson from \"react-json-view\";\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  useEffect(() => {\n    setOutput(engine.transformData(input))\n  }, [engine, input])\n\n  const renderOutput = (output: string) => {\n    let obj = {}\n    try {\n      obj = JSON.parse(output);\n      console.log(\"valid json\")\n      return <ReactJson src={obj}/>\n    } catch (e) {\n      console.log(\"invalid json\", e)\n      return (\n          <FloatingLabel controlId=\"outputTextArea\" label=\"Output\">\n            <Form.Control\n                as=\"textarea\"\n                placeholder=\"Paste\"\n                style={{height: '100px'}}\n                value={output}\n                readOnly={true} />\n          </FloatingLabel>\n      )\n    }\n  }\n\n  return (\n      <div className=\"Main\">\n        <Row>\n          <Col md={{span: 5}} style={{minHeight: \"100vh\", overflow: \"scroll\"}}>\n            <FloatingLabel controlId=\"inputTextArea\" label=\"Input\">\n              <Form.Control\n                  as=\"textarea\"\n                  placeholder=\"Paste\"\n                  style={{height: '100px'}}\n                  onChange={(event) => {\n                    setInput(event.currentTarget.value)\n                  }}\n              />\n            </FloatingLabel>\n            <Row>\n              <Col md={{span: 10, offset: 1}}>\n                <TransformEngineComponent onChange={setEngine}/>\n              </Col>\n            </Row>\n          </Col>\n          <Col md={{span: 7}} style={{minHeight: \"100vh\", overflow: \"scroll\"}}>\n            {renderOutput(output)}\n          </Col>\n        </Row>\n      </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Container fluid>\n        <Main/>\n      </Container>\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}