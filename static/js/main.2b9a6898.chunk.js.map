{"version":3,"sources":["pkg/base/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/JsonBeautify.ts","pkg/transformers/ReplaceText.ts","pkg/transformers/JsonPath.ts","pkg/transformers/ReplaceRegEx.ts","pkg/base/TransformerBlueprint.ts","pkg/ui/TransformerOptionsEmpty.tsx","pkg/ui/TransformerOptionsReplaceText.tsx","pkg/ui/TransformerOptionsJsonPath.tsx","pkg/ui/TransformerOptionsJsonBeautify.tsx","pkg/ui/TransformerOptionsUnescape.tsx","pkg/ui/TransformerOptionsReplaceRegEx.tsx","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","_transformers","this","input","push","index","splice","result","transformers","forEach","trans","_a","transformData","from","Unescape","replace","i","n","JsonBeautify","permissive","length","transformPermissively","transformNormal","obj","require","parse","JSON","stringify","e","p","ReplaceText","old","new","replaceAll","JsonPath","jsonPath","jp","query","toString","ReplaceRegEx","RegExp","TypeError","message","TransformerBlueprint","make","newInstance","name","allTransformers","get","Map","TransformerOptionsEmpty","TransformerOptionsReplaceText","transformer","onChange","setReplacer","fromPartial","InputGroup","className","Text","id","FormControl","value","event","currentTarget","TransformerOptionsJsonPath","setJsonPathTrans","placeholder","scope","target","rel","href","TransformerOptionsJsonBeautify","setPermissive","Row","Col","OverlayTrigger","placement","overlay","Tooltip","defaultChecked","icons","checked","TransformerOptionsUnescape","TransformerOptionsReplaceRegEx","TransformerNode","props","onClick","md","span","Accordion","Item","eventKey","Header","Body","trigger","rootClose","document","body","click","onRemove","Popover","Button","variant","TransformEngineComponent","useState","engine","setEngine","useEffect","map","_","updated","replaceTransformer","prevState","clone","handleChangeTransformer","removeTransformer","handleRemoveTransformer","DropdownButton","title","onSelect","transformerMeta","forName","addTransformer","handleAddTransformer","all","key","Dropdown","as","renderSupportedNodes","Main","setInput","output","setOutput","offset","data","shouldInitiallyExpand","style","defaultStyles","renderOutput","App","Container","fluid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2b9a6898.chunk.js","sourcesContent":["import {StringTransformer} from \"./StringTransformer\";\n\nclass TransformEngine implements StringTransformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: StringTransformer[] = [];\n  get transformers(): StringTransformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: StringTransformer) {\n    this._transformers.push(input)\n  }\n\n  replaceTransformer(index: number, input: StringTransformer) {\n    if (this._transformers[index]) {\n      this._transformers[index] = input\n    }\n  }\n\n  removeTransformer(index: number) {\n    if (this._transformers[index]) {\n      this._transformers.splice(index, 1);\n    }\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Unescape implements StringTransformer {\n  transformData(input: string): string {\n    // TODO: credit https://onlinestringtools.com/unescape-string\n    return input.replace(\n        /\\\\(.?)/g,\n        function (i, n) {\n          return n === \"\\\\\" ? \"\\\\\" : n === \"n\" ? \"\\n\" : n === \"t\" ? \"\t\" : n === \"\" ? \"\" : n\n        })\n  }\n\n  name(): string {\n    return \"Unescape Splashed\";\n  }\n}\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class JsonBeautify implements StringTransformer {\n  public permissive: boolean = false\n\n  name(): string {\n    return \"JSON Beautify\";\n  }\n\n  transformData(input: string): string {\n    if (input.length === 0) {\n      return input\n    }\n    return this.permissive\n        ? this.transformPermissively(input)\n        : this.transformNormal(input);\n  }\n\n  private transformPermissively(input: string): string {\n    try {\n      let dJSON = require('dirty-json');\n      let obj = dJSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  private transformNormal(input: string): string {\n    try {\n      let obj = JSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonBeautify>): JsonBeautify {\n    let result = new JsonBeautify()\n    result.permissive = p.permissive ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class ReplaceText implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n\n  name(): string {\n    return \"Replace Text\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n    return input.replaceAll(this.old, this.new)\n  }\n\n  static fromPartial(p: Partial<ReplaceText>): ReplaceText {\n    let result = new ReplaceText()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\nimport jp from 'jsonpath'\n\nexport default class JsonPath implements StringTransformer {\n  public jsonPath: string = \"\"\n\n  name(): string {\n    return \"JSON Path\";\n  }\n\n  transformData(input: string): string {\n    if (this.jsonPath.length === 0) {\n      return input;\n    }\n    try {\n      input = input.replaceAll('\\n', '')\n      let obj = JSON.parse(input);\n      let resultObj = jp.query(obj, this.jsonPath)\n      return resultObj.toString()\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonPath>): JsonPath {\n    let result = new JsonPath()\n    result.jsonPath = p.jsonPath ?? \"\"\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class ReplaceRegEx implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n\n  name(): string {\n    return \"Replace RegEx\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n\n    try {\n      return input.replaceAll(new RegExp(this.old, 'g'), this.new)\n    } catch (e: unknown) {\n      if (e instanceof TypeError) {\n        return \"Invalid RegEx\"\n      }\n      return (e as Error).message\n    }\n  }\n\n  static fromPartial(p: Partial<ReplaceRegEx>): ReplaceRegEx {\n    let result = new ReplaceRegEx()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    return result\n  }\n}","import Unescape from \"../transformers/Unescape\";\nimport {StringTransformer} from \"./StringTransformer\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\n\ntype CreateTransformerFunction = () => StringTransformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())],\n    [\"jsonpath\", new TransformerBlueprint(() => new JsonPath())],\n    [\"replaceregex\", new TransformerBlueprint(() => new ReplaceRegEx())],\n    [\"replacetext\", new TransformerBlueprint(() => new ReplaceText())],\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","export const TransformerOptionsEmpty = () => {\n  return (\n      <div>No option available</div>\n  )\n}\n\n","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport React from \"react\";\n\ninterface Props {\n  transformer: ReplaceText\n  onChange?: (updated: ReplaceText) => void\n}\n\nexport const TransformerOptionsReplaceText = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<ReplaceText>) => {\n    if (onChange) {\n      onChange(ReplaceText.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <FormControl\n              value={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              value={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ninterface Props {\n  transformer: JsonPath\n  onChange?: (updated: JsonPath) => void\n}\n\nexport const TransformerOptionsJsonPath = ({transformer, onChange}: Props) => {\n  const setJsonPathTrans = (input: Partial<JsonPath>) => {\n    if (onChange) {\n      onChange(JsonPath.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"json-path\">Query</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.jsonPath}\n              onChange={(event) => setJsonPathTrans({\n                ...transformer,\n                jsonPath: event.currentTarget.value\n              })}/>\n        </InputGroup>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Notation</th>\n            <th scope=\"col\">Description</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <th scope=\"row\">$</th>\n            <td>The root element</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">.</th>\n            <td>Child member operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">..</th>\n            <td>Recursive descendant operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">[]</th>\n            <td>Subscript operator</td>\n          </tr>\n          </tbody>\n        </table>\n        <a className=\"d-flex justify-content-end\"\n           target=\"_blank\" rel=\"noopener noreferrer\"\n           href=\"https://github.com/dchester/jsonpath#jsonpath-syntax\">More examples</a>\n      </div>\n  )\n}","import React from \"react\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Toggle from \"react-toggle\";\nimport {Col, OverlayTrigger, Row, Tooltip} from \"react-bootstrap\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\n\ninterface Props {\n  transformer: JsonBeautify\n  onChange?: (updated: JsonBeautify) => void\n}\n\nexport const TransformerOptionsJsonBeautify = ({transformer, onChange}: Props) => {\n  const setPermissive = (input: Partial<JsonBeautify>) => {\n    if (onChange) {\n      onChange(JsonBeautify.fromPartial(input))\n    }\n  }\n\n  return (\n      <Row>\n        <Col>\n          <div>\n            Permissive\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip>Try to parse malformed JSON permissively, may NOT keep the JSON\n                  original's structure</Tooltip>}>\n              <InfoCircle className=\"text-primary ms-2\"/>\n            </OverlayTrigger>\n          </div>\n        </Col>\n        <Col>\n          <div className=\"d-flex justify-content-end\">\n            <Toggle\n                defaultChecked={transformer.permissive}\n                icons={false}\n                onChange={(event: { currentTarget: { checked: any; }; }) => setPermissive({\n                  ...transformer,\n                  permissive: event.currentTarget.checked\n                })}/>\n          </div>\n        </Col>\n      </Row>\n  )\n}","import React from \"react\";\n\nexport const TransformerOptionsUnescape = () => {\n  return (\n      <div>\n        Convert this:\n        <div className=\"\">\n          <code>&#123;\\\"level\\\":\\\"info\\\",\\\"returncode\\\":0&#125;</code>\n        </div>\n        to this:\n        <div className=\"\">\n          <code>&#123;\"level\":\"info\",\"returncode\":0&#125;</code>\n        </div>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\n\ninterface Props {\n  transformer: ReplaceRegEx\n  onChange?: (updated: ReplaceRegEx) => void\n}\n\nexport const TransformerOptionsReplaceRegEx = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<ReplaceRegEx>) => {\n    if (onChange) {\n      onChange(ReplaceRegEx.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <InputGroup.Text>/</InputGroup.Text>\n          <FormControl\n              value={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n          <InputGroup.Text>/g</InputGroup.Text>\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              value={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Expr</th>\n            <th scope=\"col\">Description</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <th scope=\"row\"><code>.</code></th>\n            <td>any character except newline</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>\\w</code> <code>\\d</code> <code>\\s</code></th>\n            <td>word, digit, whitespace</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>\\W</code> <code>\\D</code> <code>\\S</code></th>\n            <td>not word, digit, whitespace</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[abc]</code></th>\n            <td>any of a, b, or c</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[^abc]</code></th>\n            <td>not a, b, or c</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[a-g]</code></th>\n            <td>character between a & g</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>*</code> <code>+</code> <code>?</code></th>\n            <td>0 or more, 1 or more, 0 or 1</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>a&#123;5&#125;</code> <code>a&#123;2,&#125;</code></th>\n            <td>exactly five, two or more</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>a&#123;1,3&#125;</code></th>\n            <td>between one & three</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>ab|cd</code></th>\n            <td>match ab or cd</td>\n          </tr>\n          </tbody>\n        </table>\n        <a className=\"d-flex justify-content-end\"\n           target=\"_blank\" rel=\"noopener noreferrer\"\n           href=\"https://regexr.com/\">More examples</a>\n      </div>\n  )\n}","import {Accordion, Button, Col, OverlayTrigger, Popover, Row} from \"react-bootstrap\";\nimport React from \"react\";\nimport {StringTransformer} from \"../base/StringTransformer\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport {TransformerOptionsEmpty} from \"./TransformerOptionsEmpty\";\nimport {TransformerOptionsReplaceText} from \"./TransformerOptionsReplaceText\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport {TransformerOptionsJsonPath} from \"./TransformerOptionsJsonPath\";\nimport {Trash} from \"react-bootstrap-icons\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport {TransformerOptionsJsonBeautify} from \"./TransformerOptionsJsonBeautify\";\nimport Unescape from \"../transformers/Unescape\";\nimport {TransformerOptionsUnescape} from \"./TransformerOptionsUnescape\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\nimport {TransformerOptionsReplaceRegEx} from \"./TransformerOptionsReplaceRegEx\";\n\ninterface Props {\n  index: number\n  transformer: StringTransformer\n  onChange?: (index: number, updated: StringTransformer) => void\n  onRemove?: (index: number) => void\n}\n\nexport const TransformerNode = (props: Props) => {\n  const renderOptionBody = (transformer: StringTransformer): React.ReactNode => {\n    if (transformer instanceof ReplaceText) {\n      return <TransformerOptionsReplaceText\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof ReplaceRegEx) {\n      return <TransformerOptionsReplaceRegEx\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonPath) {\n      return <TransformerOptionsJsonPath\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonBeautify) {\n      return <TransformerOptionsJsonBeautify\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof Unescape) {\n      return <TransformerOptionsUnescape />\n    } else {\n      return <TransformerOptionsEmpty/>\n    }\n  }\n\n  const handleRemove = () => {\n    document.body.click()\n    if (props.onRemove) {\n      props.onRemove(props.index)\n    }\n  }\n\n  const renderOverlay = (onClick: () => void) => (\n      <Popover id=\"popover-basic\">\n        <Popover.Body>\n          <Button variant=\"danger\"\n                  onClick={() => onClick()}>\n            Yes, delete!\n          </Button>\n        </Popover.Body>\n      </Popover>\n  );\n\n  return (\n      <Row className=\"mt-3\">\n        <Col md={{span: 11}}>\n          <Accordion.Item\n              key={props.index.toString()}\n              eventKey={props.index.toString()}>\n            <Accordion.Header>\n              {props.transformer.name()}\n            </Accordion.Header>\n            <Accordion.Body>\n              {renderOptionBody(props.transformer)}\n            </Accordion.Body>\n          </Accordion.Item>\n        </Col>\n        <Col md={{span: 1}}>\n          <OverlayTrigger\n              trigger=\"click\"\n              rootClose\n              placement=\"right\"\n              overlay={renderOverlay(handleRemove)}\n          >\n            <Button\n                variant=\"danger\"\n                className=\"mt-2\"><Trash/></Button>\n          </OverlayTrigger>\n        </Col>\n      </Row>\n  );\n}\n","import TransformEngine from \"../base/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../base/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\nimport {StringTransformer} from \"../base/StringTransformer\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleChangeTransformer = (index: number, transformer: StringTransformer) => {\n    engine.replaceTransformer(index, transformer)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleRemoveTransformer = (index: number) => {\n    engine.removeTransformer(index)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode\n                        index={index}\n                        key={index.toString()}\n                        transformer={transformer}\n                        onChange={(index, updated) => handleChangeTransformer(index, updated)}\n                        onRemove={(index) => handleRemoveTransformer(index)}\n                    />\n            )\n          }\n        </Accordion>\n\n        <DropdownButton\n            className=\"d-flex justify-content-center mt-4\"\n            title=\"Add processor\"\n            onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../base/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\nimport {defaultStyles, JsonView} from 'react-json-view-lite';\nimport 'react-json-view-lite/dist/index.css';\nimport TextareaAutosize from 'react-textarea-autosize'\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  useEffect(() => {\n    setOutput(engine.transformData(input))\n  }, [engine, input])\n\n  const renderOutput = (output: string) => {\n    let obj = {}\n    try {\n      obj = JSON.parse(output);\n      return <JsonView\n          data={obj}\n          shouldInitiallyExpand={(_) => true}\n          style={defaultStyles}\n      />\n    } catch (e) {\n      return <div className=\"output-textarea bg-light border\">\n        {output}\n      </div>\n    }\n  }\n\n  return (\n      <div className=\"Main\">\n        <Row>\n          <Col md={{span: 5}} className=\"main-layout-column scrolling-area\">\n            <div className=\"scrolling-element-inside\">\n              <div className=\"position-relative\">\n                <TextareaAutosize\n                    className=\"input-textarea bg-light border\"\n                    onChange={(event) => setInput(event.currentTarget.value)}\n                />\n                { input.length > 0 || <div className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">INPUT</div>}\n              </div>\n              <Row className=\"mb-5\">\n                <Col md={{span: 10, offset: 1}}>\n                  <TransformEngineComponent\n                      onChange={setEngine}/>\n                </Col>\n              </Row>\n            </div>\n          </Col>\n          <Col md={{span: 7}} className=\"main-layout-column\">\n            <div className=\"position-relative\">\n              {renderOutput(output)}\n              { output.length > 0 || <div className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">OUTPUT</div>}\n            </div>\n          </Col>\n        </Row>\n      </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Container fluid>\n        <Main/>\n      </Container>\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}