{"version":3,"sources":["pkg/base/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/ReplaceText.ts","pkg/transformers/JsonPath.ts","pkg/transformers/ReplaceRegEx.ts","pkg/base/TransformerBlueprint.ts","pkg/ui/TransformerOptionsEmpty.tsx","pkg/ui/TransformerOptionsReplaceText.tsx","pkg/ui/TransformerOptionsJsonPath.tsx","pkg/ui/TransformerOptionsUnescape.tsx","pkg/ui/TransformerOptionsReplaceRegEx.tsx","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","constructor","_transformers","clone","from","result","transformers","this","addTransformer","input","push","replaceTransformer","index","removeTransformer","splice","transformData","forEach","trans","_a","name","Unescape","replace","i","n","ReplaceText","old","new","length","replaceAll","fromPartial","p","_p$old","_p$new","JsonPath","jsonPath","obj","JSON","parse","jp","query","toString","e","_p$jsonPath","ReplaceRegEx","RegExp","TypeError","message","TransformerBlueprint","make","newInstance","forName","allTransformers","get","all","_TransformerBlueprint","Map","TransformerOptionsEmpty","_jsx","children","TransformerOptionsReplaceText","_ref","transformer","onChange","setReplacer","_jsxs","InputGroup","className","Text","id","FormControl","value","event","currentTarget","TransformerOptionsJsonPath","placeholder","setJsonPathTrans","scope","target","rel","href","TransformerOptionsUnescape","TransformerOptionsReplaceRegEx","TransformerNode","props","Row","Col","md","span","Accordion","Item","eventKey","Header","Body","_props$onChange","call","_props$onChange2","_props$onChange3","OverlayTrigger","trigger","rootClose","placement","overlay","onClick","handleRemove","document","body","click","onRemove","Popover","Button","variant","Trash","TransformEngineComponent","engine","setEngine","useState","useEffect","map","_","updated","handleChangeTransformer","prevState","handleRemoveTransformer","DropdownButton","title","onSelect","transformerMeta","handleAddTransformer","renderSupportedNodes","key","Dropdown","as","Main","setInput","output","setOutput","searchParams","setSearchParams","useSearchParams","location","useLocation","navigate","useNavigate","handlePaste","_event$clipboardData","preventDefault","paste","clipboardData","getData","takeClipboard","has","delete","pathname","navigator","clipboard","readText","then","r","addEventListener","removeEventListener","TextareaAutosize","onPaste","_event$clipboardData2","platform","toLowerCase","indexOf","offset","JsonView","data","shouldInitiallyExpand","style","defaultStyles","renderOutput","Image","loading","width","height","src","alt","App","BrowserRouter","Container","fluid","Routes","Route","path","element","ReactDOM","render","React","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.aaf6fe7c.chunk.js","sourcesContent":["import {StringTransformer} from \"./StringTransformer\";\n\nclass TransformEngine implements StringTransformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: StringTransformer[] = [];\n  get transformers(): StringTransformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: StringTransformer) {\n    this._transformers.push(input)\n  }\n\n  replaceTransformer(index: number, input: StringTransformer) {\n    if (this._transformers[index]) {\n      this._transformers[index] = input\n    }\n  }\n\n  removeTransformer(index: number) {\n    if (this._transformers[index]) {\n      this._transformers.splice(index, 1);\n    }\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Unescape implements StringTransformer {\n  transformData(input: string): string {\n    // TODO: credit https://onlinestringtools.com/unescape-string\n    return input.replace(\n        /\\\\(.?)/g,\n        function (i, n) {\n          return n === \"\\\\\" ? \"\\\\\" : n === \"n\" ? \"\\n\" : n === \"t\" ? \"\t\" : n === \"\" ? \"\" : n\n        })\n  }\n\n  name(): string {\n    return \"Unescape Splashed\";\n  }\n}\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class ReplaceText implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n\n  name(): string {\n    return \"Replace Text\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n    return input.replaceAll(this.old, this.new)\n  }\n\n  static fromPartial(p: Partial<ReplaceText>): ReplaceText {\n    let result = new ReplaceText()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\nimport jp from 'jsonpath'\n\nexport default class JsonPath implements StringTransformer {\n  public jsonPath: string = \"\"\n\n  name(): string {\n    return \"JSON Path\";\n  }\n\n  transformData(input: string): string {\n    if (this.jsonPath.length === 0) {\n      return input;\n    }\n    try {\n      input = input.replaceAll('\\n', '')\n      let obj = JSON.parse(input);\n      let resultObj = jp.query(obj, this.jsonPath)\n      return resultObj.toString()\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonPath>): JsonPath {\n    let result = new JsonPath()\n    result.jsonPath = p.jsonPath ?? \"\"\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class ReplaceRegEx implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n\n  name(): string {\n    return \"Replace RegEx\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n\n    try {\n      return input.replaceAll(new RegExp(this.old, 'g'), this.new)\n    } catch (e: unknown) {\n      if (e instanceof TypeError) {\n        return \"Invalid RegEx\"\n      }\n      return (e as Error).message\n    }\n  }\n\n  static fromPartial(p: Partial<ReplaceRegEx>): ReplaceRegEx {\n    let result = new ReplaceRegEx()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    return result\n  }\n}","import Unescape from \"../transformers/Unescape\";\nimport {StringTransformer} from \"./StringTransformer\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\n\ntype CreateTransformerFunction = () => StringTransformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    // [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())],\n    [\"jsonpath\", new TransformerBlueprint(() => new JsonPath())],\n    [\"replaceregex\", new TransformerBlueprint(() => new ReplaceRegEx())],\n    [\"replacetext\", new TransformerBlueprint(() => new ReplaceText())],\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","export const TransformerOptionsEmpty = () => {\n  return (\n      <div>No option available</div>\n  )\n}\n\n","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport React from \"react\";\n\ninterface Props {\n  transformer: ReplaceText\n  onChange?: (updated: ReplaceText) => void\n}\n\nexport const TransformerOptionsReplaceText = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<ReplaceText>) => {\n    if (onChange) {\n      onChange(ReplaceText.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <FormControl\n              value={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              value={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ninterface Props {\n  transformer: JsonPath\n  onChange?: (updated: JsonPath) => void\n}\n\nexport const TransformerOptionsJsonPath = ({transformer, onChange}: Props) => {\n  const setJsonPathTrans = (input: Partial<JsonPath>) => {\n    if (onChange) {\n      onChange(JsonPath.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"json-path\">Query</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.jsonPath}\n              onChange={(event) => setJsonPathTrans({\n                ...transformer,\n                jsonPath: event.currentTarget.value\n              })}/>\n        </InputGroup>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Notation</th>\n            <th scope=\"col\">Description</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <th scope=\"row\">$</th>\n            <td>The root element</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">.</th>\n            <td>Child member operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">..</th>\n            <td>Recursive descendant operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">[]</th>\n            <td>Subscript operator</td>\n          </tr>\n          </tbody>\n        </table>\n        <a className=\"d-flex justify-content-end\"\n           target=\"_blank\" rel=\"noopener noreferrer\"\n           href=\"https://github.com/dchester/jsonpath#jsonpath-syntax\">More examples</a>\n      </div>\n  )\n}","import React from \"react\";\n\nexport const TransformerOptionsUnescape = () => {\n  return (\n      <div>\n        Convert this:\n        <div className=\"\">\n          <code>&#123;\\\"level\\\":\\\"info\\\",\\\"returncode\\\":0&#125;</code>\n        </div>\n        to this:\n        <div className=\"\">\n          <code>&#123;\"level\":\"info\",\"returncode\":0&#125;</code>\n        </div>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\n\ninterface Props {\n  transformer: ReplaceRegEx\n  onChange?: (updated: ReplaceRegEx) => void\n}\n\nexport const TransformerOptionsReplaceRegEx = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<ReplaceRegEx>) => {\n    if (onChange) {\n      onChange(ReplaceRegEx.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <InputGroup.Text>/</InputGroup.Text>\n          <FormControl\n              value={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n          <InputGroup.Text>/g</InputGroup.Text>\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              value={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Expr</th>\n            <th scope=\"col\">Description</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <th scope=\"row\"><code>.</code></th>\n            <td>any character except newline</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>\\w</code> <code>\\d</code> <code>\\s</code></th>\n            <td>word, digit, whitespace</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>\\W</code> <code>\\D</code> <code>\\S</code></th>\n            <td>not word, digit, whitespace</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[abc]</code></th>\n            <td>any of a, b, or c</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[^abc]</code></th>\n            <td>not a, b, or c</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>[a-g]</code></th>\n            <td>character between a & g</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>*</code> <code>+</code> <code>?</code></th>\n            <td>0 or more, 1 or more, 0 or 1</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>a&#123;5&#125;</code> <code>a&#123;2,&#125;</code></th>\n            <td>exactly five, two or more</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>a&#123;1,3&#125;</code></th>\n            <td>between one & three</td>\n          </tr>\n          <tr>\n            <th scope=\"row\"><code>ab|cd</code></th>\n            <td>match ab or cd</td>\n          </tr>\n          </tbody>\n        </table>\n        <a className=\"d-flex justify-content-end\"\n           target=\"_blank\" rel=\"noopener noreferrer\"\n           href=\"https://regexr.com/\">More examples</a>\n      </div>\n  )\n}","import {Accordion, Button, Col, OverlayTrigger, Popover, Row} from \"react-bootstrap\";\nimport React from \"react\";\nimport {StringTransformer} from \"../base/StringTransformer\";\nimport ReplaceText from \"../transformers/ReplaceText\";\nimport {TransformerOptionsEmpty} from \"./TransformerOptionsEmpty\";\nimport {TransformerOptionsReplaceText} from \"./TransformerOptionsReplaceText\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport {TransformerOptionsJsonPath} from \"./TransformerOptionsJsonPath\";\nimport {Trash} from \"react-bootstrap-icons\";\nimport Unescape from \"../transformers/Unescape\";\nimport {TransformerOptionsUnescape} from \"./TransformerOptionsUnescape\";\nimport ReplaceRegEx from \"../transformers/ReplaceRegEx\";\nimport {TransformerOptionsReplaceRegEx} from \"./TransformerOptionsReplaceRegEx\";\n\ninterface Props {\n  index: number\n  transformer: StringTransformer\n  onChange?: (index: number, updated: StringTransformer) => void\n  onRemove?: (index: number) => void\n}\n\nexport const TransformerNode = (props: Props) => {\n  const renderOptionBody = (transformer: StringTransformer): React.ReactNode => {\n    if (transformer instanceof ReplaceText) {\n      return <TransformerOptionsReplaceText\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof ReplaceRegEx) {\n      return <TransformerOptionsReplaceRegEx\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonPath) {\n      return <TransformerOptionsJsonPath\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof Unescape) {\n      return <TransformerOptionsUnescape />\n    } else {\n      return <TransformerOptionsEmpty/>\n    }\n  }\n\n  const handleRemove = () => {\n    document.body.click()\n    if (props.onRemove) {\n      props.onRemove(props.index)\n    }\n  }\n\n  const renderOverlay = (onClick: () => void) => (\n      <Popover id=\"popover-basic\">\n        <Popover.Body>\n          <Button variant=\"danger\"\n                  onClick={() => onClick()}>\n            Yes, delete!\n          </Button>\n        </Popover.Body>\n      </Popover>\n  );\n\n  return (\n      <Row className=\"mt-3\">\n        <Col md={{span: 11}}>\n          <Accordion.Item\n              key={props.index.toString()}\n              eventKey={props.index.toString()}>\n            <Accordion.Header>\n              {props.transformer.name()}\n            </Accordion.Header>\n            <Accordion.Body>\n              {renderOptionBody(props.transformer)}\n            </Accordion.Body>\n          </Accordion.Item>\n        </Col>\n        <Col md={{span: 1}}>\n          <OverlayTrigger\n              trigger=\"click\"\n              rootClose\n              placement=\"right\"\n              overlay={renderOverlay(handleRemove)}\n          >\n            <Button\n                variant=\"danger\"\n                className=\"mt-2\"><Trash/></Button>\n          </OverlayTrigger>\n        </Col>\n      </Row>\n  );\n}\n","import TransformEngine from \"../base/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../base/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\nimport {StringTransformer} from \"../base/StringTransformer\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleChangeTransformer = (index: number, transformer: StringTransformer) => {\n    engine.replaceTransformer(index, transformer)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleRemoveTransformer = (index: number) => {\n    engine.removeTransformer(index)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode\n                        index={index}\n                        key={index.toString()}\n                        transformer={transformer}\n                        onChange={(index, updated) => handleChangeTransformer(index, updated)}\n                        onRemove={(index) => handleRemoveTransformer(index)}\n                    />\n            )\n          }\n        </Accordion>\n\n        <DropdownButton\n            className=\"d-flex justify-content-center mt-4\"\n            title=\"Add processor\"\n            onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, Image, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../base/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\nimport {defaultStyles, JsonView} from 'react-json-view-lite';\nimport 'react-json-view-lite/dist/index.css';\nimport TextareaAutosize from 'react-textarea-autosize';\nimport {useSearchParams, useNavigate, useLocation} from 'react-router-dom';\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(() => new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n  const navigate = useNavigate();\n\n  const handlePaste = (event: ClipboardEvent) => {\n    event.preventDefault();\n    let paste = event.clipboardData?.getData(\"text\");\n    if (paste) {\n      setInput(paste);\n    }\n  };\n\n  useEffect(() => {\n    let takeClipboard;\n    if (searchParams.has(\"c\")) {\n      takeClipboard = searchParams.get(\"c\");\n      if (takeClipboard) {\n        searchParams.delete(\"c\");\n        setSearchParams(searchParams);\n        navigate(location.pathname, {replace: true});\n      }\n    }\n\n    // clipboard request\n    if (takeClipboard === '1') {\n      navigator.clipboard.readText().then(r => {\n        setInput(r);\n      })\n    }\n  }, [location, navigate, searchParams, setSearchParams]);\n\n  useEffect(() => {\n    document.addEventListener(\"paste\", handlePaste);\n    return () => {\n      document.removeEventListener(\"paste\", handlePaste);\n    };\n  }, []);\n\n  useEffect(() => {\n    let result = engine.transformData(input)\n    setOutput(result);\n  }, [engine, input])\n\n  const renderOutput = (output: string) => {\n    let obj = {}\n    try {\n      obj = JSON.parse(output);\n      return <JsonView\n        data={obj}\n        shouldInitiallyExpand={(_) => true}\n        style={defaultStyles}\n      />\n    } catch (e) {\n      return <div className=\"output-textarea bg-light border\">\n        {output}\n      </div>\n    }\n  }\n\n  const getShortcutText = () => {\n    if (navigator.platform.toLowerCase().indexOf(\"mac\") !== -1) {\n      return \"⌘ + V\";\n    } else {\n      return \"Ctrl + V\";\n    }\n  }\n\n  return (\n    <div className=\"Main position-relative\">\n      <Row>\n        <Col md={{span: 5}} className=\"main-layout-column scrolling-area\">\n          <div className=\"scrolling-element-inside\">\n            <div className=\"position-relative\">\n              <TextareaAutosize\n                className=\"input-textarea bg-light border\"\n                value={input}\n                onChange={(event) => setInput(event.target.value)}\n                onPaste={(event) => {\n                  event.preventDefault();\n                  let paste = event.clipboardData?.getData(\"text\");\n                  if (paste) {\n                    setInput(paste);\n                  }\n                }}\n              />\n              {input.length > 0 || <div\n               className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">{getShortcutText()}</div>}\n            </div>\n            <Row className=\"mb-5\">\n              <Col md={{span: 10, offset: 1}}>\n                <TransformEngineComponent\n                  onChange={setEngine}/>\n              </Col>\n            </Row>\n          </div>\n        </Col>\n        <Col md={{span: 7}} className=\"main-layout-column\">\n          <div className=\"position-relative\">\n            {renderOutput(output)}\n            {output.length > 0 || <div\n             className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">···</div>}\n          </div>\n        </Col>\n      </Row>\n      {output.length > 0 || <a target=\"_blank\"\n                               rel=\"noopener noreferrer\"\n                               href=\"https://github.com/ltpquang/nagini\"\n                               className=\"position-absolute top-0 end-0\">\n        <Image loading=\"lazy\" width=\"120\" height=\"120\"\n               src=\"https://github.blog/wp-content/uploads/2008/12/forkme_right_gray_6d6d6d.png?resize=149%2C149\"\n               className=\"attachment-full size-full\"\n               alt=\"Fork me on GitHub\"\n               data-recalc-dims=\"1\"/>\n      </a>\n      }\n    </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\nimport {Route, Routes, BrowserRouter} from 'react-router-dom';\n\nconst App = () => (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Container fluid>\n          <Routes>\n            <Route path=\"/nagini\" element={<Main/>}/>\n          </Routes>\n        </Container>\n      </div>\n    </BrowserRouter>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}