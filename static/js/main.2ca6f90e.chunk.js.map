{"version":3,"sources":["pkg/base/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/JsonBeautify.ts","pkg/transformers/Replace.ts","pkg/transformers/JsonPath.ts","pkg/base/TransformerBlueprint.ts","pkg/ui/TransformerOptionsEmpty.tsx","pkg/ui/TransformerOptionsReplace.tsx","pkg/ui/TransformerOptionsJsonPath.tsx","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","_transformers","this","input","push","index","result","transformers","forEach","trans","_a","transformData","from","Unescape","replace","i","n","JsonBeautify","obj","JSON","parse","e","stringify","Replace","old","new","useRegEx","length","replaceAll","RegExp","TypeError","message","p","JsonPath","jsonPath","jp","require","query","toString","TransformerBlueprint","make","newInstance","name","allTransformers","get","Map","TransformerOptionsEmpty","TransformerOptionsReplace","transformer","onChange","setReplacer","fromPartial","InputGroup","className","Text","id","DropdownButton","title","variant","onSelect","eventKey","Dropdown","Item","FormControl","placeholder","event","currentTarget","value","TransformerOptionsJsonPath","setJsonPathTrans","TransformerNode","props","Accordion","Header","Body","TransformEngineComponent","useState","engine","setEngine","useEffect","map","_","updated","replaceTransformer","prevState","clone","handleChangeTransformer","transformerMeta","forName","addTransformer","handleAddTransformer","all","key","as","renderSupportedNodes","Main","setInput","output","setOutput","Row","Col","md","span","offset","FloatingLabel","controlId","label","Form","Control","style","height","readOnly","App","Container","fluid","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2ca6f90e.chunk.js","sourcesContent":["import {StringTransformer} from \"./StringTransformer\";\n\nclass TransformEngine implements StringTransformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: StringTransformer[] = [];\n  get transformers(): StringTransformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: StringTransformer) {\n    this._transformers.push(input)\n  }\n\n  replaceTransformer(index: number, input: StringTransformer) {\n    if (this._transformers[index]) {\n      this._transformers[index] = input\n    }\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Unescape implements StringTransformer {\n  transformData(input: string): string {\n    // TODO: https://onlinestringtools.com/unescape-string\n    return input.replace(\n        /\\\\(.?)/g,\n        function (i, n) {\n          return n === \"\\\\\" ? \"\\\\\" : n === \"n\" ? \"\\n\" : n === \"t\" ? \"\t\" : n === \"\" ? \"\" : n\n        })\n  }\n\n  name(): string {\n    return \"Unescape\";\n  }\n}\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class JsonBeautify implements StringTransformer {\n  name(): string {\n    return \"JSON Beautify\";\n  }\n\n  transformData(input: string): string {\n    let obj = {}\n    try {\n      obj = JSON.parse(input);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n    return JSON.stringify(obj, null, 4);\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Replace implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n  public useRegEx: boolean = false;\n\n  name(): string {\n    return \"Replace\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n\n    if (this.useRegEx) {\n      try {\n        return input.replaceAll(new RegExp(this.old, 'g'), this.new)\n      } catch (e: unknown) {\n        if (e instanceof TypeError) {\n          return \"Invalid RegEx\"\n        }\n        return (e as Error).message\n      }\n    } else {\n      return input.replaceAll(this.old, this.new)\n    }\n  }\n\n  static fromPartial(p: Partial<Replace>): Replace {\n    let result = new Replace()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    result.useRegEx = p.useRegEx ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class JsonPath implements StringTransformer {\n  public jsonPath: string = \"\"\n  private jp = require('jsonpath')\n\n  name(): string {\n    return \"JSON Path Query\";\n  }\n\n  transformData(input: string): string {\n    if (this.jsonPath.length === 0) {\n      return input;\n    }\n    try {\n      input = input.replaceAll('\\n', '')\n      let obj = JSON.parse(input);\n      let resultObj = this.jp.query(obj, this.jsonPath)\n      return resultObj.toString()\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonPath>): JsonPath {\n    let result = new JsonPath()\n    result.jsonPath = p.jsonPath ?? \"\"\n    return result\n  }\n}","import Unescape from \"../transformers/Unescape\";\nimport {StringTransformer} from \"./StringTransformer\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Replace from \"../transformers/Replace\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ntype CreateTransformerFunction = () => StringTransformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())],\n    [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())],\n    [\"jsonpath\", new TransformerBlueprint(() => new JsonPath())],\n    [\"replace\", new TransformerBlueprint(() => new Replace())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","export const TransformerOptionsEmpty = () => {\n  return (\n      <div>No option available</div>\n  )\n}\n\n","import {Dropdown, DropdownButton, FormControl, InputGroup} from \"react-bootstrap\";\nimport Replace from \"../transformers/Replace\";\nimport React from \"react\";\n\ninterface Props {\n  transformer: Replace\n  onChange?: (updated: Replace) => void\n}\n\nexport const TransformerOptionsReplace = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<Replace>) => {\n    if (onChange) {\n      onChange(Replace.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <DropdownButton\n              id=\"isRegex\"\n              title={transformer.useRegEx ? \"regex\" : \"text\"}\n              variant=\"outline-secondary\"\n              onSelect={(eventKey) => setReplacer({...transformer, useRegEx: eventKey === \"regex\"})}>\n            <Dropdown.Item eventKey=\"text\">text</Dropdown.Item>\n            <Dropdown.Item eventKey=\"regex\">regex</Dropdown.Item>\n          </DropdownButton>\n          { transformer.useRegEx && <InputGroup.Text>/</InputGroup.Text> }\n          <FormControl\n              placeholder={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n          { transformer.useRegEx && <InputGroup.Text>/g</InputGroup.Text> }\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ninterface Props {\n  transformer: JsonPath\n  onChange?: (updated: JsonPath) => void\n}\n\nexport const TransformerOptionsJsonPath = ({transformer, onChange}: Props) => {\n  const setJsonPathTrans = (input: Partial<JsonPath>) => {\n    if (onChange) {\n      onChange(JsonPath.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"json-path\">JSON Path</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.jsonPath}\n              onChange={(event) => setJsonPathTrans({...transformer, jsonPath: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {Accordion} from \"react-bootstrap\";\nimport React from \"react\";\nimport {StringTransformer} from \"../base/StringTransformer\";\nimport Replace from \"../transformers/Replace\";\nimport {TransformerOptionsEmpty} from \"./TransformerOptionsEmpty\";\nimport {TransformerOptionsReplace} from \"./TransformerOptionsReplace\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport {TransformerOptionsJsonPath} from \"./TransformerOptionsJsonPath\";\n\ninterface Props {\n  index: number\n  transformer: StringTransformer\n  children?: React.ReactNode\n  onChange?: (index: number, updated: StringTransformer) => void\n}\n\nexport const TransformerNode = (props: Props) => {\n  const optionBody = (transformer: StringTransformer): React.ReactNode => {\n    if (transformer instanceof Replace) {\n      return <TransformerOptionsReplace\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonPath) {\n      return <TransformerOptionsJsonPath\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else {\n      return <TransformerOptionsEmpty/>\n    }\n  }\n\n  return (\n      <Accordion.Item\n          key={props.index.toString()}\n          eventKey={props.index.toString()}>\n        <Accordion.Header>\n          {props.transformer.name()}\n        </Accordion.Header>\n        <Accordion.Body>\n          {optionBody(props.transformer)}\n        </Accordion.Body>\n      </Accordion.Item>\n  );\n}\n","import TransformEngine from \"../base/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../base/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\nimport {StringTransformer} from \"../base/StringTransformer\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  function handleChangeTransformer(index: number, transformer: StringTransformer) {\n    engine.replaceTransformer(index, transformer)\n\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode index={index}\n                                     key={index.toString()}\n                                     transformer={transformer}\n                                     onChange={(index, updated) => handleChangeTransformer(index, updated)}\n                    />\n            )\n          }\n        </Accordion>\n\n        <DropdownButton id=\"dropdown-item-button\" title=\"Add node\"\n                        onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, FloatingLabel, Form, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../base/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  useEffect(() => {\n    setOutput(engine.transformData(input))\n  }, [engine, input])\n\n  return (\n      <div className=\"Main\">\n        <Row>\n          <Col md={{span: 8, offset: 2}}>\n            <FloatingLabel controlId=\"inputTextArea\" label=\"Input\">\n              <Form.Control\n                  as=\"textarea\"\n                  placeholder=\"Paste\"\n                  style={{height: '100px'}}\n                  onChange={(event) => {\n                    setInput(event.currentTarget.value)\n                  }}\n              />\n            </FloatingLabel>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{span: 6, offset: 3}}>\n            <TransformEngineComponent\n                onChange={setEngine}/>\n          </Col>\n        </Row>\n        <Row>\n          <Col md={{span: 8, offset: 2}}>\n            <FloatingLabel controlId=\"outputTextArea\" label=\"Output\">\n              <Form.Control\n                  as=\"textarea\"\n                  placeholder=\"Paste\"\n                  style={{height: '100px'}}\n                  value={output}\n                  readOnly={true}\n              />\n            </FloatingLabel>\n          </Col>\n        </Row>\n      </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Container fluid={\"md\"}>\n        <Main/>\n      </Container>\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}