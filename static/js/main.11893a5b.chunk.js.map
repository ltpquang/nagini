{"version":3,"sources":["pkg/base/TransformEngine.ts","pkg/transformers/Unescape.ts","pkg/transformers/JsonBeautify.ts","pkg/transformers/Replace.ts","pkg/transformers/JsonPath.ts","pkg/base/TransformerBlueprint.ts","pkg/ui/TransformerOptionsEmpty.tsx","pkg/ui/TransformerOptionsReplace.tsx","pkg/ui/TransformerOptionsJsonPath.tsx","pkg/ui/TransformerOptionsJsonBeautify.tsx","pkg/ui/TransformerOptionsUnescape.tsx","pkg/ui/TransformerNode.tsx","pkg/ui/TransformEngineComponent.tsx","pkg/ui/Main.tsx","App.tsx","index.tsx"],"names":["TransformEngine","_transformers","this","input","push","index","splice","result","transformers","forEach","trans","_a","transformData","from","Unescape","replace","i","n","JsonBeautify","permissive","length","transformPermissively","transformNormal","obj","require","parse","JSON","stringify","e","p","Replace","old","new","useRegEx","replaceAll","RegExp","TypeError","message","JsonPath","jsonPath","jp","query","toString","TransformerBlueprint","make","newInstance","name","allTransformers","get","Map","TransformerOptionsEmpty","TransformerOptionsReplace","transformer","onChange","setReplacer","fromPartial","InputGroup","className","Text","id","DropdownButton","title","variant","onSelect","eventKey","Dropdown","Item","FormControl","placeholder","event","currentTarget","value","TransformerOptionsJsonPath","setJsonPathTrans","scope","target","rel","href","TransformerOptionsJsonBeautify","setPermissive","Row","Col","OverlayTrigger","placement","overlay","Tooltip","defaultChecked","icons","checked","TransformerOptionsUnescape","TransformerNode","props","onClick","md","span","Accordion","Header","Body","trigger","rootClose","document","body","click","onRemove","Popover","Button","TransformEngineComponent","useState","engine","setEngine","useEffect","map","_","updated","replaceTransformer","prevState","clone","handleChangeTransformer","removeTransformer","handleRemoveTransformer","transformerMeta","forName","addTransformer","handleAddTransformer","all","key","as","renderSupportedNodes","Main","setInput","output","setOutput","offset","data","shouldInitiallyExpand","style","defaultStyles","renderOutput","App","Container","fluid","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.11893a5b.chunk.js","sourcesContent":["import {StringTransformer} from \"./StringTransformer\";\n\nclass TransformEngine implements StringTransformer {\n  static clone(from: TransformEngine): TransformEngine {\n    let result = new TransformEngine()\n    result._transformers = from.transformers\n    return result\n  }\n\n  private _transformers: StringTransformer[] = [];\n  get transformers(): StringTransformer[] {\n    return this._transformers;\n  }\n\n  addTransformer(input: StringTransformer) {\n    this._transformers.push(input)\n  }\n\n  replaceTransformer(index: number, input: StringTransformer) {\n    if (this._transformers[index]) {\n      this._transformers[index] = input\n    }\n  }\n\n  removeTransformer(index: number) {\n    if (this._transformers[index]) {\n      this._transformers.splice(index, 1);\n    }\n  }\n\n  transformData(input: string): string {\n    let result = input\n    this.transformers.forEach((trans, index, _a) => {\n      result = trans.transformData(result)\n    })\n    return result\n  }\n\n\n  name(): string {\n    return \"Transform Engine\";\n  }\n}\n\nexport default TransformEngine\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Unescape implements StringTransformer {\n  transformData(input: string): string {\n    // TODO: credit https://onlinestringtools.com/unescape-string\n    return input.replace(\n        /\\\\(.?)/g,\n        function (i, n) {\n          return n === \"\\\\\" ? \"\\\\\" : n === \"n\" ? \"\\n\" : n === \"t\" ? \"\t\" : n === \"\" ? \"\" : n\n        })\n  }\n\n  name(): string {\n    return \"Unescape Splashed\";\n  }\n}\n","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class JsonBeautify implements StringTransformer {\n  public permissive: boolean = false\n\n  name(): string {\n    return \"JSON Beautify\";\n  }\n\n  transformData(input: string): string {\n    if (input.length === 0) {\n      return input\n    }\n    return this.permissive\n        ? this.transformPermissively(input)\n        : this.transformNormal(input);\n  }\n\n  private transformPermissively(input: string): string {\n    try {\n      let dJSON = require('dirty-json');\n      let obj = dJSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  private transformNormal(input: string): string {\n    try {\n      let obj = JSON.parse(input);\n      return JSON.stringify(obj, null, 4);\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonBeautify>): JsonBeautify {\n    let result = new JsonBeautify()\n    result.permissive = p.permissive ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\n\nexport default class Replace implements StringTransformer {\n  public old: string = \"\";\n  public new: string = \"\";\n  public useRegEx: boolean = false;\n\n  name(): string {\n    return \"Replace\";\n  }\n\n  transformData(input: string): string {\n    if (this.old.length === 0) {\n      return input\n    }\n\n    if (this.useRegEx) {\n      try {\n        return input.replaceAll(new RegExp(this.old, 'g'), this.new)\n      } catch (e: unknown) {\n        if (e instanceof TypeError) {\n          return \"Invalid RegEx\"\n        }\n        return (e as Error).message\n      }\n    } else {\n      return input.replaceAll(this.old, this.new)\n    }\n  }\n\n  static fromPartial(p: Partial<Replace>): Replace {\n    let result = new Replace()\n    result.old = p.old ?? \"\"\n    result.new = p.new ?? \"\"\n    result.useRegEx = p.useRegEx ?? false\n    return result\n  }\n}","import {StringTransformer} from \"../base/StringTransformer\";\nimport jp from 'jsonpath'\n\nexport default class JsonPath implements StringTransformer {\n  public jsonPath: string = \"\"\n\n  name(): string {\n    return \"JSON Path\";\n  }\n\n  transformData(input: string): string {\n    if (this.jsonPath.length === 0) {\n      return input;\n    }\n    try {\n      input = input.replaceAll('\\n', '')\n      let obj = JSON.parse(input);\n      let resultObj = jp.query(obj, this.jsonPath)\n      return resultObj.toString()\n    } catch (e) {\n      return \"Invalid JSON string\";\n    }\n  }\n\n  static fromPartial(p: Partial<JsonPath>): JsonPath {\n    let result = new JsonPath()\n    result.jsonPath = p.jsonPath ?? \"\"\n    return result\n  }\n}","import Unescape from \"../transformers/Unescape\";\nimport {StringTransformer} from \"./StringTransformer\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Replace from \"../transformers/Replace\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ntype CreateTransformerFunction = () => StringTransformer;\n\nexport default class TransformerBlueprint {\n  newInstance: CreateTransformerFunction\n\n  constructor(make: CreateTransformerFunction) {\n    this.newInstance = make;\n  }\n\n  private static allTransformers: Map<string, TransformerBlueprint> = new Map<string, TransformerBlueprint>([\n    [\"jsonbeautify\", new TransformerBlueprint(() => new JsonBeautify())],\n    [\"jsonpath\", new TransformerBlueprint(() => new JsonPath())],\n    [\"replace\", new TransformerBlueprint(() => new Replace())],\n    [\"unescape\", new TransformerBlueprint(() => new Unescape())]\n  ])\n\n  static forName(name: string): (TransformerBlueprint | undefined) {\n    return this.allTransformers.get(name)\n  }\n\n  static all(): Map<string, TransformerBlueprint> {\n    return this.allTransformers\n  }\n}\n","export const TransformerOptionsEmpty = () => {\n  return (\n      <div>No option available</div>\n  )\n}\n\n","import {Dropdown, DropdownButton, FormControl, InputGroup} from \"react-bootstrap\";\nimport Replace from \"../transformers/Replace\";\nimport React from \"react\";\n\ninterface Props {\n  transformer: Replace\n  onChange?: (updated: Replace) => void\n}\n\nexport const TransformerOptionsReplace = ({transformer, onChange}: Props) => {\n  const setReplacer = (input: Partial<Replace>) => {\n    if (onChange) {\n      onChange(Replace.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"replace\">Replace</InputGroup.Text>\n          <DropdownButton\n              id=\"isRegex\"\n              title={transformer.useRegEx ? \"regex\" : \"text\"}\n              variant=\"outline-secondary\"\n              onSelect={(eventKey) => setReplacer({...transformer, useRegEx: eventKey === \"regex\"})}>\n            <Dropdown.Item eventKey=\"text\">text</Dropdown.Item>\n            <Dropdown.Item eventKey=\"regex\">regex</Dropdown.Item>\n          </DropdownButton>\n          { transformer.useRegEx && <InputGroup.Text>/</InputGroup.Text> }\n          <FormControl\n              placeholder={transformer.old}\n              onChange={(event) => setReplacer({...transformer, old: event.currentTarget.value})}/>\n          { transformer.useRegEx && <InputGroup.Text>/g</InputGroup.Text> }\n        </InputGroup>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"with\">with</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.new}\n              onChange={(event) => setReplacer({...transformer, new: event.currentTarget.value})}/>\n        </InputGroup>\n      </div>\n  )\n}","import {FormControl, InputGroup} from \"react-bootstrap\";\nimport React from \"react\";\nimport JsonPath from \"../transformers/JsonPath\";\n\ninterface Props {\n  transformer: JsonPath\n  onChange?: (updated: JsonPath) => void\n}\n\nexport const TransformerOptionsJsonPath = ({transformer, onChange}: Props) => {\n  const setJsonPathTrans = (input: Partial<JsonPath>) => {\n    if (onChange) {\n      onChange(JsonPath.fromPartial(input))\n    }\n  }\n\n  return (\n      <div>\n        <InputGroup className=\"mb-3\">\n          <InputGroup.Text id=\"json-path\">Query</InputGroup.Text>\n          <FormControl\n              placeholder={transformer.jsonPath}\n              onChange={(event) => setJsonPathTrans({\n                ...transformer,\n                jsonPath: event.currentTarget.value\n              })}/>\n        </InputGroup>\n        <table className=\"table\">\n          <thead>\n          <tr>\n            <th scope=\"col\">Notation</th>\n            <th scope=\"col\">Description</th>\n          </tr>\n          </thead>\n          <tbody>\n          <tr>\n            <th scope=\"row\">$</th>\n            <td>The root element</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">.</th>\n            <td>Child member operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">..</th>\n            <td>Recursive descendant operator</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">[]</th>\n            <td>Subscript operator</td>\n          </tr>\n          </tbody>\n        </table>\n        <a className=\"d-flex justify-content-end\"\n           target=\"_blank\" rel=\"noopener noreferrer\"\n           href=\"https://github.com/dchester/jsonpath#jsonpath-syntax\">More examples</a>\n      </div>\n  )\n}","import React from \"react\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport Toggle from \"react-toggle\";\nimport {Col, OverlayTrigger, Row, Tooltip} from \"react-bootstrap\";\nimport {InfoCircle} from \"react-bootstrap-icons\";\n\ninterface Props {\n  transformer: JsonBeautify\n  onChange?: (updated: JsonBeautify) => void\n}\n\nexport const TransformerOptionsJsonBeautify = ({transformer, onChange}: Props) => {\n  const setPermissive = (input: Partial<JsonBeautify>) => {\n    if (onChange) {\n      onChange(JsonBeautify.fromPartial(input))\n    }\n  }\n\n  return (\n      <Row>\n        <Col>\n          <div>\n            Permissive\n            <OverlayTrigger\n                placement=\"right\"\n                overlay={<Tooltip>Try to parse malformed JSON permissively, may NOT keep the JSON\n                  original's structure</Tooltip>}>\n              <InfoCircle className=\"text-primary ms-2\"/>\n            </OverlayTrigger>\n          </div>\n        </Col>\n        <Col>\n          <div className=\"d-flex justify-content-end\">\n            <Toggle\n                defaultChecked={transformer.permissive}\n                icons={false}\n                onChange={(event: { currentTarget: { checked: any; }; }) => setPermissive({\n                  ...transformer,\n                  permissive: event.currentTarget.checked\n                })}/>\n          </div>\n        </Col>\n      </Row>\n  )\n}","import React from \"react\";\n\nexport const TransformerOptionsUnescape = () => {\n  return (\n      <div>\n        Convert this:\n        <div className=\"\">\n          <code>&#123;\\\"level\\\":\\\"info\\\",\\\"returncode\\\":0&#125;</code>\n        </div>\n        to this:\n        <div className=\"\">\n          <code>&#123;\"level\":\"info\",\"returncode\":0&#125;</code>\n        </div>\n      </div>\n  )\n}","import {Accordion, Button, Col, OverlayTrigger, Popover, Row} from \"react-bootstrap\";\nimport React from \"react\";\nimport {StringTransformer} from \"../base/StringTransformer\";\nimport Replace from \"../transformers/Replace\";\nimport {TransformerOptionsEmpty} from \"./TransformerOptionsEmpty\";\nimport {TransformerOptionsReplace} from \"./TransformerOptionsReplace\";\nimport JsonPath from \"../transformers/JsonPath\";\nimport {TransformerOptionsJsonPath} from \"./TransformerOptionsJsonPath\";\nimport {Trash} from \"react-bootstrap-icons\";\nimport JsonBeautify from \"../transformers/JsonBeautify\";\nimport {TransformerOptionsJsonBeautify} from \"./TransformerOptionsJsonBeautify\";\nimport Unescape from \"../transformers/Unescape\";\nimport {TransformerOptionsUnescape} from \"./TransformerOptionsUnescape\";\n\ninterface Props {\n  index: number\n  transformer: StringTransformer\n  onChange?: (index: number, updated: StringTransformer) => void\n  onRemove?: (index: number) => void\n}\n\nexport const TransformerNode = (props: Props) => {\n  const renderOptionBody = (transformer: StringTransformer): React.ReactNode => {\n    if (transformer instanceof Replace) {\n      return <TransformerOptionsReplace\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonPath) {\n      return <TransformerOptionsJsonPath\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof JsonBeautify) {\n      return <TransformerOptionsJsonBeautify\n          transformer={transformer}\n          onChange={(transformer) => props.onChange?.(props.index, transformer)}\n      />\n    } else if (transformer instanceof Unescape) {\n      return <TransformerOptionsUnescape />\n    } else {\n      return <TransformerOptionsEmpty/>\n    }\n  }\n\n  const handleRemove = () => {\n    document.body.click()\n    if (props.onRemove) {\n      props.onRemove(props.index)\n    }\n  }\n\n  const renderOverlay = (onClick: () => void) => (\n      <Popover id=\"popover-basic\">\n        <Popover.Body>\n          <Button variant=\"danger\"\n                  onClick={() => onClick()}>\n            Yes, delete!\n          </Button>\n        </Popover.Body>\n      </Popover>\n  );\n\n  return (\n      <Row className=\"mt-3\">\n        <Col md={{span: 11}}>\n          <Accordion.Item\n              key={props.index.toString()}\n              eventKey={props.index.toString()}>\n            <Accordion.Header>\n              {props.transformer.name()}\n            </Accordion.Header>\n            <Accordion.Body>\n              {renderOptionBody(props.transformer)}\n            </Accordion.Body>\n          </Accordion.Item>\n        </Col>\n        <Col md={{span: 1}}>\n          <OverlayTrigger\n              trigger=\"click\"\n              rootClose\n              placement=\"right\"\n              overlay={renderOverlay(handleRemove)}\n          >\n            <Button\n                variant=\"danger\"\n                className=\"mt-2\"><Trash/></Button>\n          </OverlayTrigger>\n        </Col>\n      </Row>\n  );\n}\n","import TransformEngine from \"../base/TransformEngine\";\nimport {Accordion, Dropdown, DropdownButton} from \"react-bootstrap\";\nimport React, {useEffect, useState} from \"react\";\nimport TransformerBlueprint from \"../base/TransformerBlueprint\";\nimport {TransformerNode} from \"./TransformerNode\";\nimport {StringTransformer} from \"../base/StringTransformer\";\n\ninterface Props {\n  onChange?: (engine: TransformEngine) => void\n}\n\nconst TransformEngineComponent = ({onChange}: Props) => {\n  const [engine, setEngine] = useState(new TransformEngine())\n\n  useEffect(() => {\n    if (onChange) {\n      onChange(engine)\n    }\n  }, [engine, onChange])\n\n  const handleAddTransformer = (eventKey: string | null) => {\n    if (!eventKey) {\n      return\n    }\n\n    let transformerMeta = TransformerBlueprint.forName(eventKey)\n    if (!transformerMeta) {\n      return\n    }\n\n    engine.addTransformer(transformerMeta.newInstance())\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleChangeTransformer = (index: number, transformer: StringTransformer) => {\n    engine.replaceTransformer(index, transformer)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const handleRemoveTransformer = (index: number) => {\n    engine.removeTransformer(index)\n    setEngine(prevState => TransformEngine.clone(prevState))\n  }\n\n  const renderSupportedNodes = () => {\n    let result: JSX.Element[] = []\n    TransformerBlueprint.all().forEach((value, key, _) => result.push(\n        <Dropdown.Item\n            as=\"button\"\n            key={key}\n            eventKey={key}>{value.newInstance().name()}</Dropdown.Item>));\n    return result\n  }\n\n  return (\n      <div>\n        <Accordion>\n          {\n            engine.transformers.map(\n                (transformer, index, _) =>\n                    <TransformerNode\n                        index={index}\n                        key={index.toString()}\n                        transformer={transformer}\n                        onChange={(index, updated) => handleChangeTransformer(index, updated)}\n                        onRemove={(index) => handleRemoveTransformer(index)}\n                    />\n            )\n          }\n        </Accordion>\n\n        <DropdownButton\n            className=\"d-flex justify-content-center mt-4\"\n            title=\"Add processor\"\n            onSelect={(eventKey) => handleAddTransformer(eventKey)}>\n          {renderSupportedNodes()}\n        </DropdownButton>\n      </div>\n  )\n}\n\nexport default TransformEngineComponent;\n","import React, {useEffect, useState} from \"react\";\nimport {Col, Row} from \"react-bootstrap\";\nimport TransformEngine from \"../base/TransformEngine\";\nimport TransformEngineComponent from \"./TransformEngineComponent\";\nimport {defaultStyles, JsonView} from 'react-json-view-lite';\nimport 'react-json-view-lite/dist/index.css';\nimport TextareaAutosize from 'react-textarea-autosize'\n\nexport const Main = () => {\n  const [input, setInput] = useState<string>(\"\");\n  const [engine, setEngine] = useState<TransformEngine>(new TransformEngine());\n  const [output, setOutput] = useState<string>(\"\");\n\n  useEffect(() => {\n    setOutput(engine.transformData(input))\n  }, [engine, input])\n\n  const renderOutput = (output: string) => {\n    let obj = {}\n    try {\n      obj = JSON.parse(output);\n      return <JsonView\n          data={obj}\n          shouldInitiallyExpand={(_) => true}\n          style={defaultStyles}\n      />\n    } catch (e) {\n      return <div className=\"output-textarea bg-light border\">\n        {output}\n      </div>\n    }\n  }\n\n  return (\n      <div className=\"Main\">\n        <Row>\n          <Col md={{span: 5}} className=\"main-layout-column scrolling-area\">\n            <div className=\"scrolling-element-inside\">\n              <div className=\"position-relative\">\n                <TextareaAutosize\n                    className=\"input-textarea bg-light border\"\n                    onChange={(event) => setInput(event.currentTarget.value)}\n                />\n                { input.length > 0 || <div className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">INPUT</div>}\n              </div>\n              <Row className=\"mb-5\">\n                <Col md={{span: 10, offset: 1}}>\n                  <TransformEngineComponent\n                      onChange={setEngine}/>\n                </Col>\n              </Row>\n            </div>\n          </Col>\n          <Col md={{span: 7}} className=\"main-layout-column\">\n            <div className=\"position-relative\">\n              {renderOutput(output)}\n              { output.length > 0 || <div className=\"textarea-placeholder noselect position-absolute top-50 start-50 translate-middle\">OUTPUT</div>}\n            </div>\n          </Col>\n        </Row>\n      </div>\n  )\n}\n\nexport default Main\n\n","import {Container} from 'react-bootstrap';\nimport './App.css';\nimport Main from \"./pkg/ui/Main\";\n\nconst App = () => (\n    <div className=\"App\">\n      <Container fluid>\n        <Main/>\n      </Container>\n    </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}